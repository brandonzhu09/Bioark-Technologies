# Generated by Django 5.0.7 on 2024-09-21 20:05

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BacterialMarker',
            fields=[
                ('bacterial_marker_id', models.AutoField(primary_key=True, serialize=False)),
                ('bacterial_marker_name', models.CharField()),
                ('bacterial_marker_code', models.CharField()),
            ],
            options={
                'db_table': 'bacterial_markers',
            },
        ),
        migrations.CreateModel(
            name='BacterialMarkerSpecialCase',
            fields=[
                ('bacterial_marker_id', models.AutoField(primary_key=True, serialize=False)),
                ('bacterial_marker_name', models.CharField()),
                ('bacterial_marker_code', models.CharField()),
                ('structure_type_symbol', models.CharField()),
            ],
            options={
                'db_table': 'bacterial_markers_special_case',
            },
        ),
        migrations.CreateModel(
            name='DeliveryFormat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('delivery_format_symbol', models.CharField(unique=True)),
                ('delivery_format_name', models.CharField(unique=True)),
                ('description', models.CharField(blank=True, null=True)),
            ],
            options={
                'db_table': 'delivery_formats',
            },
        ),
        migrations.CreateModel(
            name='DesignLibrary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('structure_type_code', models.CharField()),
                ('delivery_format_code', models.CharField()),
                ('ready_status', models.CharField()),
                ('amount', models.CharField()),
                ('unit_size', models.CharField()),
                ('discount_code', models.CharField(null=True)),
                ('base_price', models.DecimalField(decimal_places=2, max_digits=8)),
                ('adjusted_price', models.DecimalField(decimal_places=2, max_digits=8, null=True)),
                ('currency', models.CharField()),
            ],
            options={
                'db_table': 'design_library',
            },
        ),
        migrations.CreateModel(
            name='FluoresceneMarker',
            fields=[
                ('fluorescene_marker_id', models.AutoField(primary_key=True, serialize=False)),
                ('fluorescene_marker_name', models.CharField()),
                ('fluorescene_marker_code', models.CharField()),
            ],
            options={
                'db_table': 'fluorescene_markers',
            },
        ),
        migrations.CreateModel(
            name='FunctionType',
            fields=[
                ('function_type_id', models.AutoField(primary_key=True, serialize=False)),
                ('function_type_symbol', models.CharField(unique=True)),
                ('function_type_name', models.CharField(unique=True)),
                ('description', models.CharField(blank=True, null=True)),
                ('load_status', models.CharField(blank=True, default='Loaded', null=True)),
            ],
            options={
                'db_table': 'function_types',
            },
        ),
        migrations.CreateModel(
            name='GeneLibrary',
            fields=[
                ('gene_library_id', models.AutoField(primary_key=True, serialize=False)),
                ('target_sequence', models.CharField(max_length=6)),
                ('gene_name', models.CharField()),
                ('symbol', models.CharField()),
                ('locus_id', models.IntegerField(null=True)),
                ('species', models.CharField(null=True)),
                ('description', models.CharField(blank=True, null=True)),
                ('reference_link', models.CharField(null=True)),
            ],
            options={
                'db_table': 'gene_library',
            },
        ),
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('category_id', models.AutoField(primary_key=True, serialize=False)),
                ('category_name', models.CharField(unique=True)),
                ('description', models.CharField(blank=True, null=True)),
            ],
            options={
                'db_table': 'product_category',
            },
        ),
        migrations.CreateModel(
            name='ProductInventory',
            fields=[
                ('inventory_id', models.AutoField(primary_key=True, serialize=False)),
                ('units_in_stock', models.IntegerField()),
                ('units_on_order', models.IntegerField()),
                ('loaded', models.BooleanField()),
                ('currency', models.CharField()),
                ('manufacturer', models.CharField()),
            ],
            options={
                'db_table': 'product_inventory',
            },
        ),
        migrations.CreateModel(
            name='Promoter',
            fields=[
                ('promoter_id', models.AutoField(primary_key=True, serialize=False)),
                ('promoter_name', models.CharField()),
                ('promoter_code', models.CharField()),
            ],
            options={
                'db_table': 'promoters',
            },
        ),
        migrations.CreateModel(
            name='PromoterSpecialCase',
            fields=[
                ('promoter_id', models.AutoField(primary_key=True, serialize=False)),
                ('promoter_name', models.CharField()),
                ('promoter_code', models.CharField()),
                ('function_type_symbol', models.CharField(null=True)),
                ('structure_type_symbol', models.CharField(null=True)),
            ],
            options={
                'db_table': 'promoters_special_case',
            },
        ),
        migrations.CreateModel(
            name='Property',
            fields=[
                ('property_id', models.AutoField(primary_key=True, serialize=False)),
                ('property_name', models.CharField()),
                ('property_code', models.CharField()),
            ],
            options={
                'db_table': 'property',
            },
        ),
        migrations.CreateModel(
            name='ProteinTag',
            fields=[
                ('protein_tag_id', models.AutoField(primary_key=True, serialize=False)),
                ('protein_tag_name', models.CharField()),
                ('protein_tag_code', models.CharField()),
            ],
            options={
                'db_table': 'protein_tags',
            },
        ),
        migrations.CreateModel(
            name='SelectionMarker',
            fields=[
                ('selection_marker_id', models.AutoField(primary_key=True, serialize=False)),
                ('selection_marker_name', models.CharField()),
                ('selection_marker_code', models.CharField()),
            ],
            options={
                'db_table': 'selection_markers',
            },
        ),
        migrations.CreateModel(
            name='StructureType',
            fields=[
                ('structure_type_id', models.AutoField(primary_key=True, serialize=False)),
                ('structure_type_symbol', models.CharField(unique=True)),
                ('structure_type_name', models.CharField(unique=True)),
            ],
            options={
                'db_table': 'structure_types',
            },
        ),
        migrations.CreateModel(
            name='DeliveryLibrary',
            fields=[
                ('delivery_library_id', models.AutoField(primary_key=True, serialize=False)),
                ('structure_type_symbol', models.CharField()),
                ('delivery_format_symbol', models.CharField()),
                ('function_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='products.functiontype')),
            ],
            options={
                'db_table': 'delivery_library',
            },
        ),
        migrations.AddField(
            model_name='functiontype',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='products.productcategory'),
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('product_id', models.AutoField(primary_key=True, serialize=False)),
                ('product_sku', models.CharField()),
                ('product_name', models.CharField()),
                ('description', models.CharField(blank=True, null=True)),
                ('function_type_code', models.CharField()),
                ('structure_type_code', models.CharField()),
                ('serial_id', models.CharField()),
                ('promoter_code', models.CharField()),
                ('property_code', models.CharField()),
                ('protein_tag_code', models.CharField()),
                ('fluorescene_marker_code', models.CharField()),
                ('selection_marker_code', models.CharField()),
                ('bacterial_marker_code', models.CharField()),
                ('delivery_format_code', models.CharField()),
                ('base_price', models.DecimalField(decimal_places=2, max_digits=8)),
                ('adjusted_price', models.DecimalField(decimal_places=2, max_digits=8)),
                ('amount', models.CharField()),
                ('unit_size', models.CharField()),
                ('discount_code', models.CharField(null=True)),
                ('ready_status', models.CharField(blank=True, null=True)),
                ('gene', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='products.genelibrary')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='products.productcategory')),
                ('inventory', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='products.productinventory')),
            ],
            options={
                'db_table': 'products',
            },
        ),
        migrations.AddConstraint(
            model_name='promoterspecialcase',
            constraint=models.CheckConstraint(check=models.Q(('function_type_symbol__isnull', False), ('structure_type_symbol__isnull', False), _connector='OR'), name='not_both_null'),
        ),
    ]
